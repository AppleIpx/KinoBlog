# Generated by Django 4.2.10 on 2024-05-14 10:24

from django.db import migrations, models
import django.db.models.deletion
import some_proj.blog.snippets.film_snippet
import some_proj.blog.snippets.serial_snippet
import wagtail.blocks
import wagtail.embeds.blocks
import wagtail.fields
import wagtail.images.blocks
import wagtail.images.models
import wagtail.search.index
import wagtail.snippets.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0091_remove_revision_submitted_for_moderation'),
    ]

    operations = [
        migrations.CreateModel(
            name='AuthorBlog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=250, verbose_name='Имя')),
                ('last_name', models.CharField(blank=True, max_length=250, verbose_name='Фамилия')),
                ('author_email', models.EmailField(blank=True, max_length=254, verbose_name='Электронная почтв')),
            ],
            options={
                'verbose_name': 'автор',
                'verbose_name_plural': 'авторы',
            },
        ),
        migrations.CreateModel(
            name='BlogPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('date', models.DateField(verbose_name='Дата публикации')),
                ('body', wagtail.fields.StreamField([('text', wagtail.blocks.RichTextBlock(features=['h1', 'h2', 'h3', 'bold', 'italic', 'hr', 'blockquote'], help_text='Введите описание', label='Текст')), ('images', wagtail.blocks.StructBlock([('image', wagtail.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock(help_text='Загрузите изображение', icon='image', label='Изображение'))), ('title', wagtail.blocks.CharBlock(blank=True, label='Заголовок', required=False)), ('description', wagtail.blocks.CharBlock(blank=True, label='Описание', required=False))])), ('content', wagtail.embeds.blocks.EmbedBlock(help_text='Пример ссылки: https://www.youtube.com/watch?v=5mM0fX_kKCU', label='Ссылка на видео контент')), ('film', wagtail.blocks.StructBlock([('film', wagtail.snippets.blocks.SnippetChooserBlock(some_proj.blog.snippets.film_snippet.FilmBlogModel, label='Выберите фильм')), ('film_fields', wagtail.blocks.MultipleChoiceBlock(choices=[('Название', 'Название'), ('Постер', 'Постер'), ('Страны', 'Страны'), ('Жанры', 'Жанры'), ('Описание', 'Описание'), ('Трейлер', 'Трейлер'), ('Кадры', 'Кадры'), ('Актёры', 'Актёры'), ('Длительность', 'Длительность'), ('Режиссёр', 'Режиссёр')], label='Выберите поле для отображения'))])), ('serial', wagtail.blocks.StructBlock([('serial', wagtail.snippets.blocks.SnippetChooserBlock(some_proj.blog.snippets.serial_snippet.SerialBlogModel, label='Выберите сериал')), ('serial_fields', wagtail.blocks.MultipleChoiceBlock(choices=[('Название', 'Название'), ('Постер', 'Постер'), ('Страны', 'Страны'), ('Жанры', 'Жанры'), ('Описание', 'Описание'), ('Трейлер', 'Трейлер'), ('Кадры', 'Кадры'), ('Актёры', 'Актёры'), ('Длительность', 'Длительность'), ('Режиссёр', 'Режиссёр'), ('Сезон', 'Сезон'), ('Количество серий', 'Количество серий')], label='Выберите поле для отображения'))]))], blank=True, verbose_name='Место для творчества')),
            ],
            options={
                'verbose_name': 'пост',
                'verbose_name_plural': 'посты',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='BlogTagPage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CustomImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='title')),
                ('file', wagtail.images.models.WagtailImageField(height_field='height', upload_to=wagtail.images.models.get_upload_to, verbose_name='file', width_field='width')),
                ('width', models.IntegerField(editable=False, verbose_name='width')),
                ('height', models.IntegerField(editable=False, verbose_name='height')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('focal_point_x', models.PositiveIntegerField(blank=True, null=True)),
                ('focal_point_y', models.PositiveIntegerField(blank=True, null=True)),
                ('focal_point_width', models.PositiveIntegerField(blank=True, null=True)),
                ('focal_point_height', models.PositiveIntegerField(blank=True, null=True)),
                ('file_size', models.PositiveIntegerField(editable=False, null=True)),
                ('file_hash', models.CharField(blank=True, db_index=True, editable=False, max_length=40)),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtail.images.models.ImageFileMixin, wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='CustomRendition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filter_spec', models.CharField(db_index=True, max_length=255)),
                ('file', wagtail.images.models.WagtailImageField(height_field='height', storage=wagtail.images.models.get_rendition_storage, upload_to=wagtail.images.models.get_rendition_upload_to, width_field='width')),
                ('width', models.IntegerField(editable=False)),
                ('height', models.IntegerField(editable=False)),
                ('focal_point_key', models.CharField(blank=True, default='', editable=False, max_length=16)),
            ],
            bases=(wagtail.images.models.ImageFileMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Profession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Название профессии', max_length=155, verbose_name='Профессия')),
            ],
            options={
                'verbose_name': 'профессия',
                'verbose_name_plural': 'профессии',
            },
        ),
    ]
