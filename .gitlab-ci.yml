image: docker:20.10.16
stages:
  - lint
  - tests
  - deploy

variables:
  POSTGRES_USER: 'some_proj'
  POSTGRES_PASSWORD: ''
  POSTGRES_DB: 'test_some_proj'
  POSTGRES_HOST_AUTH_METHOD: trust
  CELERY_BROKER_URL: 'redis://redis:6379/0'

precommit:
  stage: lint
  image: python:3.10
  variables:
    PRE_COMMIT_HOME: ${CI_PROJECT_DIR}/.cache/pre-commit
  cache:
    paths:
      - ${PRE_COMMIT_HOME}
  before_script:
    - pip install -q pre-commit
  script:
    - pre-commit run --show-diff-on-failure --color=always --all-files

pytest:
  stage: tests
  resource_group: test_group
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker-compose -f test.yml build
    # Ensure celerybeat does not crash due to non-existent tables
    - docker-compose -f test.yml run --rm some-proj-django-test python manage.py migrate
    - docker-compose -f test.yml up -d
  script:
    - docker-compose -f test.yml run --rm some-proj-django-test python manage.py makemigrations
    - docker-compose -f test.yml run --rm some-proj-django-test mypy .
    - docker-compose -f test.yml run some-proj-django-test pytest -n auto --create-db
    - docker-compose -f test.yml down
    - docker image rm some_proj_postgres_test

deploy:
  stage: deploy
  image: docker:latest
  variables:
    DOCKER_HOST: "ssh://${SERVER_USER}@${SERVER_HOST}"
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - ssh SERVER_USER@SERVER_HOST
    - cd ~/online_cinema/Izvekov/
    - git pull
    - docker-compose production.yml up --build --detach
    - docker image prune -f || true
